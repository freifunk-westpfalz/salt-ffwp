{# ToDo: auslagern und includen #}
{% macro address(input) -%}
    {{ salt['netaddr.address'](input) }}
{%- endmacro -%}
{% macro netmask(input) -%}
    {{ salt['netaddr.netmask'](input) }}
{%- endmacro -%}
{% macro prefix(input) -%}
    {{ salt['netaddr.prefix'](input) }}
{%- endmacro -%}
{% macro net(input) -%}
    {{ salt['netaddr.net'](input) }}
{%- endmacro -%}
{% macro cidr(input) -%}
    {{ salt['netaddr.cidr'](input) }}
{%- endmacro -%}

log syslog all;
router id {{ address(network.internal.v4) }};

#interne BIRD Routing-Tabelle
table ibgp;
table interior;
table ffwp;
table ffrl;
table ffnw;
table inetexit;
{#
table icvpn;
#}

{#
roa table icvpn_roa {
	include "/etc/bird/bird6_roa_icvpn.con?";
};
#}

function is_ffwp_ffrl_nets() {
  return net ~ [
  {{ffwp.v6_ffrl_48}}{48,64}
  ];
}

function is_ffwp_ffnw_nets() {
  return net ~ [
  {{ffwp.v6_ffnw_48}}{48,64}
  ];
}

function is_ffwp() {
    return net ~ [
    {{ffwp.v6_ffrl_48}}{48,64},
    {{ffwp.v6_ffnw_48}}{48,64},
    {{ffwp.v6_ula_48}}{48,64}
    ];
}

function is_default() {
    return net ~ [
        ::/0
    ];
}

function is_ula() {
    return net ~ [
        fc00::/7{48,64}
    ];
}

# ggf. mal aufsplitten
function is_valid_network() {
  return net ~ [
    fc00::/8{48,64}, # ULA (undefined)
    fd00::/8{48,64} # ULA (defined)
#    2001:bf7::/32{32,128}, # Freifunk (Foerderverein Freie Netzwerke) IPv6 Range
#    2a03:2260::/30{30,128}, # Freifunk Rheinland e.V.
#    2001:67c:20a1::/48{48,48}, # CCC Event Network
  ];
};

protocol device {
        scan time 10;
};

#Kopiere gelernte Routen aus FFRL in (Bird) Main Tabelle
protocol pipe pipe_main_ffrl {
  peer table ffrl;
  #Source Adresse setzen
  import filter {
      if is_default() then accept;
      reject;
  };
  export none;
};

#Kopiere gelernte Routen aus FFNW in (Bird) Main Tabelle
protocol pipe pipe_main_ffnw {
  peer table ffnw;
  #Source Adresse setzen
  import filter {
      if is_default() then accept;
      reject;
  };
  export none;
};

#Kopiere Routen aus Main in die inetexit Tabelle
protocol pipe pipe_main_inetexit {
  peer table inetexit;
  import none;
  export filter {
      if is_default() then accept;
      #todo: ggf. auch andere Public Netze
      reject;
  };
};

#Kopiere alle FFWP Routen von Bird main in Bird ffwp
protocol pipe pipe_main_ffwp {
  peer table ffwp;
  import none;
  export filter {
    if is_ffwp() then accept;
    reject;
  };
};

#Kopiere alle FFWP Routen von Bird interior in Bird main
protocol pipe pipe_main_interior {
  peer table interior;
  import filter {
      if is_ffwp() then accept;
      reject;
  };
  export none;
};

#Kopiere alle Routen bis auf FFWP und Default Routen in iBGP Tabelle
protocol pipe pipe_main_ibgp {
  peer table ibgp;
  import all;
  export where !is_ffwp() && !is_default();
};

{#
protocol pipe pipe_main_icvpn {
  peer table icvpn;
  import filter {
    if is_ffwp() then reject;
    if is_valid_network() then accept;
    reject;
  };
  export filter {
    if is_ffwp() && is_valid_network() then accept;
    if is_valid_network() then accept;
    reject;
  };
};
#}

#FFRL IPv6 Netze die announced werden sollen
protocol static ffrl_uplink_hostroute {
    table ffrl;
    route {{ffwp.v6_ffrl_48}} reject;
    route {{ffwp.v6_ffrl_00_56}} reject;
    route {{net(network.internal.v6)}} reject;
}

#FFNW IPv6 Netze die announced werden sollen
protocol static ffnw_uplink_hostroute {
    table ffnw;
    route {{ffwp.v6_ffnw_48}} reject;
    route {{ffwp.v6_ffnw_00_56}} reject;
    #TODO: beachten dass vielleicht auch FFNW als internal genutzt wird
}

#Alle FFWP Netz Routen in ffwp Kernel Table schreiben
protocol kernel kernel_ffwp {
  scan time 10;
  #Auch Device Routen in Tabelle eintragen da benoetigt und durch rules kein kontakt zur Main Routing Tabelle
  device routes;
  import none;
  export filter {
    if is_ffwp() then accept;
    reject;
  };
  table ffwp;
  kernel table 40;
};

{#
protocol kernel kernel_icvpn {
  scan time 10;
  #Auch Device Routen in Tabelle eintragen da benoetigt und durch rules kein kontakt zur Main Routing Tabelle
  device routes;
  import none;
  export filter {
# Todo: was sinnvolles rausfinden
#    krt_prefsrc = {{icvpn.ipv6 | ipaddr('address')}};
    if is_default() then reject;
    if is_ffwp() then reject;
    if is_valid_network() then accept;
    reject;
  };
  table icvpn;
  kernel table 41;
};
#}

#Routen aus inetexit in die Kernel Table 42 (ffinetexit) schreiben
protocol kernel kernel_inetexit {
  #Auch Device Routen in Tabelle eintragen da benoetigt und durch rules kein kontakt zur Main Routing Tabelle
#  device routes;
  scan time 10;
  import none;
  export all;
  table inetexit;
  kernel table 42;
};

#Tabelle um OSPF auf keinen Fall zu brechen
protocol kernel kernel_interior {
  scan time 10;
  #Auch Device Routen in Tabelle eintragen da benoetigt und durch rules kein Kontakt zur Main Routing Tabelle
  device routes;
  import none;
  export filter {
    #Default Routen nicht erwuenscht, Rest aufnehmen
    if is_default() then reject;
    accept;
  };
  table interior;
  kernel table 43;
};

protocol ospf IGP {
  area 0 {
        {% for host in internal_gre -%}
        {% if  host.ospf -%}
        interface "{{ host.name }}";
        {% endif -%}
        {% endfor -%}
        {% if  network.interfaces_direct is defined -%}
        {% for host in network.interfaces_direct -%}
        {% if  host.ospf -%}
        interface "{{ host.interface }}";
        {% endif -%}
        {% endfor -%}
        {% endif -%}
        #BGP Subnetz
        stubnet {{net(network.internal.v6)}};
        #Default Route
        stubnet ::/0;
  };
        stub router no;         # Box macht ggf. auch Transit-Traffic
        ecmp no;                # Kein Equal-Cost-Multipath, um Problemen mit unterschiedlichen
                                # Uplinks aus dem Weg zu gehen
        table interior;
        import keep filtered;
        #Wir wollen alles bis auf Default Routen importieren
        import filter{
          if is_default() then reject;
          accept;
        };
        #Keine Routen von anderen Quellen per OSPF propagieren
        export none;
};

#Sinnvoll?
#protocol direct {
#        table ffrl;
#        interface "tun-ffrl-*";
#        import where is_ffrl_tunnel_nets();
#};

# Uplink ueber ff Rheinland
template bgp ffrl_uplink {
        table ffrl;
        local as {{ ffwp.as_number }};
        import limit 10000;
        import keep filtered;
        import filter {
          if is_default() then accept;
          reject;
        };
        export filter {
          if is_ffwp_ffrl_nets() then accept;
          reject;
        };
        next hop self;
        direct;
        default bgp_local_pref {{ffrl_gre.default_v6_bgp_local_pref}};
        default bgp_med 1;
};

# Uplink ueber ff nordwest
template bgp ffnw_uplink {
        table ffnw;
        local as {{ ffwp.as_number }};
        import limit 10000;
        import keep filtered;
        import filter {
          if is_default() then accept;
          reject;
        };
        export filter {
          if is_ffwp_ffnw_nets() then accept;
          reject;
        };
        next hop self;
        direct;
        default bgp_local_pref {{ffnw_gre.default_v6_bgp_local_pref}};
        default bgp_med 1;
};

{#
template bgp icvpn_tinc {
    table icvpn;
    import limit 10000;
	  import keep filtered;
    source address {{icvpn.ipv6 | ipaddr ('address')}};
    local as {{ ffwp.as_number }};
    import filter {
      if (is_default()) then {
			print "ASN ", bgp_path.last, " announces default route (via ", proto ,")";
			reject;
		  }
		  if (is_ffwp()) then {
			     print "ASN ", bgp_path.last, " announces our RFC-1918 prefix (via ", proto ,")";
			     reject;
		  }
		  if (bgp_path.len > 16) then reject;
		  if (roa_check(icvpn_roa, net, bgp_path.last) = ROA_INVALID) then {
		     print "[icvpn] ROA check failed for ", net, " ASN ", bgp_path.last;
           reject;
		  }
      if (is_valid_network()) then accept;
		  reject;
	   };
    export filter {
      # is_valid_network sorgt dafuer das nur sinnvolle Subnetze announced werden
      if is_ffwp() && is_valid_network() then accept;
      if source = RTS_BGP then {
        if is_valid_network() then accept;
      }
      reject;
    };
}
#}

# ibgp zwischen den gateways
template bgp internal {
        table ibgp;
        source address {{address(network.internal.v6)}};
        local as {{ ffwp.as_number }};
        import filter {
                bgp_path.prepend({{ ffwp.as_number }});
                preference = 99;
                accept;
        };
        export where source = RTS_BGP;
        next hop self;
#von vielen Communitys benutzt macht hier aber Dinge kaputt, wegen OSPF wohl multihop
#        gateway direct;
#        direct;
};


# hier jeweils ein Eintrag zu jedem der anderen Gateways

{% for host in internal_gre -%}
{% if  host.ibgp -%}
protocol bgp {{ host.name }} from internal {
  neighbor {{ salt['pillar.get']('global_host_info:'~host.gre_target~':internal_v6') }} as {{ ffwp.as_number }};
};
{% endif %}
{% endfor %}


#mit local_pref ggf. Uplinks bevorzugen
{% for gre in ffrl_gre.tunnel -%}
protocol bgp ffrl_{{gre.name}} from ffrl_uplink {
  source address {{ address(gre.v6_local) }};
  neighbor {{ address(gre.v6_remote) }} as 201701;
{% if loop.first %}
  default bgp_local_pref {{ffrl_gre.default_v6_bgp_local_pref +1}};
  default bgp_med 1;
{% endif %}
};
{% endfor %}

{% for gre in ffnw_gre.tunnel -%}
protocol bgp ffnw_{{gre.name}} from ffnw_uplink {
  source address {{ address(gre.v6_local) }};
  neighbor {{ address(gre.v6_remote) }}%ffnw_{{gre.name}} as 206313;
{% if loop.first %}
  default bgp_local_pref {{ffnw_gre.default_v6_bgp_local_pref +1}};
  default bgp_med 1;
{% endif %}
};
{% endfor %}

{#
include "/etc/bird/bird6_peers_icvpn_tinc.conf";
#}
